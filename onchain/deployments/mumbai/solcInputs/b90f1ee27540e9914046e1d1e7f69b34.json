{
  "language": "Solidity",
  "sources": {
    "contracts/BundleExecutor.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\npragma experimental ABIEncoderV2;\n\ninterface IUniswapV2Pair {\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n\ninterface IERC20 {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n}\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n\n// This contract simply calls multiple targets sequentially, ensuring WETH balance before and after\n\ncontract FlashBotsMultiCall {\n    address private immutable owner;\n    address private immutable executor;\n\n    // TODO IDK\n    IWETH private WETH = IWETH(0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270);\n\n    modifier onlyExecutor() {\n        require(msg.sender == executor, \"Only executor\");\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner\");\n        _;\n    }\n\n    constructor(address _executor) payable {\n        owner = msg.sender;\n        executor = _executor;\n        if (msg.value > 0) {\n            WETH.deposit{value: msg.value}();\n        }\n    }\n\n    function setWeth(address _new) public onlyOwner {\n        WETH = IWETH(_new);\n    }\n\n    receive() external payable {}\n\n    function sweepERC20(\n        IERC20 token,\n        address _to,\n        uint256 _amount\n    ) external onlyOwner {\n        token.transfer(_to, _amount);\n    }\n\n    function hoppity(\n        uint256 _amountIn,\n        address[] calldata _targets,\n        uint256[2][] calldata _amountOuts\n    ) external onlyExecutor {\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\n\n        bool success = WETH.transfer(_targets[0], _amountIn);\n        require(success, \"first weth fail\");\n        uint256 n = _targets.length;\n        for (uint256 i = 0; i < n - 1; i++) {\n            IUniswapV2Pair(_targets[i]).swap(\n                _amountOuts[i][0],\n                _amountOuts[i][1],\n                _targets[i + 1],\n                \"\"\n            );\n        }\n        IUniswapV2Pair(_targets[n - 1]).swap(\n            _amountOuts[n - 1][0],\n            _amountOuts[n - 1][1],\n            address(this),\n            \"\"\n        );\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\n        require(\n            _wethBalanceAfter > _wethBalanceBefore,\n            \"reverted non profitable\"\n        );\n    }\n\n    function twohop(\n        uint256 wethIn,\n        address[] calldata targets,\n        uint256[] calldata amount0Outs,\n        uint256[] calldata amount1Outs\n    ) external payable onlyExecutor {\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\n        bool success = WETH.transfer(targets[0], wethIn);\n        require(success, \"first weth fail\");\n        IUniswapV2Pair(targets[0]).swap(\n            amount0Outs[0],\n            amount1Outs[0],\n            targets[1],\n            \"\"\n        );\n        IUniswapV2Pair(targets[1]).swap(\n            amount0Outs[1],\n            amount1Outs[1],\n            address(this),\n            \"\"\n        );\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\n        require(\n            _wethBalanceAfter > _wethBalanceBefore,\n            \"reverted non profitable\"\n        );\n    }\n\n    function uniswapWeth(\n        uint256 _wethAmountToFirstMarket,\n        uint256 _ethAmountToCoinbase,\n        address[] memory _targets,\n        bytes[] memory _payloads\n    ) external payable onlyExecutor {\n        require(_targets.length == _payloads.length, \"bad lengths\");\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\n        bool success = WETH.transfer(_targets[0], _wethAmountToFirstMarket);\n        require(success, \"first weth fail\");\n        for (uint256 i = 0; i < _targets.length; i++) {\n            (bool _success, bytes memory _response) = _targets[i].call(\n                _payloads[i]\n            );\n            require(_success, \"error on loop\");\n            _response;\n        }\n\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\n        require(\n            _wethBalanceAfter > _wethBalanceBefore,\n            \"reverted non profitable\"\n        );\n        // require(\n        //     _wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase,\n        //     \"coinbase fail\"\n        // );\n        // if (_ethAmountToCoinbase == 0) return;\n\n        // uint256 _ethBalance = address(this).balance;\n        // if (_ethBalance < _ethAmountToCoinbase) {\n        //     WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\n        // }\n        // block.coinbase.transfer(_ethAmountToCoinbase);\n    }\n\n    function call(\n        address payable _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external payable onlyOwner returns (bytes memory) {\n        require(_to != address(0));\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\n        require(_success);\n        return _result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}